{"version":3,"sources":["components/card/card.component.jsx","logo.svg","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAQaA,GCRE,I,YDQK,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,YENKC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+DHG,E,kDA7Db,aAAe,IAAD,8BACZ,gBAkBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,gEAWO,IAAD,OAGlBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,+BAuBnC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAMlD,OACE,sBAAK9B,UAAU,MAAf,UACE,6CACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA5DVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5c15e208.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\n// This component exists, since card-list component is not responsible for how cards look, only for how cards are listed\r\n// Individual monsters passed into this card component through props.monster from card-list component\r\n// Robohash API has multiple indexed images, which can then correspond to our monsters by using props.monster.id, which are unique numbers\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2> {props.monster.name} </h2>\r\n        <p> {props.monster.email} </p>\r\n    </div >\r\n);","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n);\r\n\r\n// Functional Component, not class-based\r\n// Props = parameters of functional component\r\n// Functional Components don't have access to internal state or life-cycle methods - they simply use Props and render HTML, making them simpler to read and test\r\n// keys used here to allow selective re-rendering which is less resource-intensive\r\n// From app.js, we pass monsters into this component as props below\r\n// Individual monsters passed from card-list component to card component\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input\r\n        className='search' // since consistent with .search from search-box.styles \r\n        type='search'\r\n        placeholder={placeholder} // Generalise placeholder since this component may be reused across apps\r\n        onChange={handleChange}\r\n    >\r\n    </input>\r\n)\r\n\r\n","import { Component } from 'react'; // Necessary to introduce class App below\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component.jsx'; // Card-list component that separates elements into 'card spaces'\nimport { SearchBox } from './components/search-box/search-box.component.jsx' // Search-box takes users' typed inputs and filters cards that don't possess string\n\nclass App extends Component { // Classes have more functionality than functions and allow for States to be worked into code, \n  // which allows for more dynamic events, giving control over what Components display\n  // Curly brackets in JSX refer to JS expressions: JSX used since React relies on HTML forms in syntax\n  // Why App.js /w components in JSX? Create-React-App includes Babel, which transforms modern JS into older browser-friendly JS in public folder when build script is run\n\n  constructor() {\n    super(); // Super method calls Constructor method onto Component class, allowing this.state\n\n    this.state = {\n      monsters: [],\n      searchField: '' // from onChange method search-box component\n    };\n  }\n\n  // App component possesses state passed down into subsidiary components, which take it as props\n\n  componentDidMount() { // Life-Cycle method fetches data, converts to JSON so JS can understand, then set monsters to array of users\n    // Promises used here\n    // Monsters could be hard-coded, but this allows for larger data to be used in array\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => { // Create custom method to alter state object based on synthetic events (search queries)\n    this.setState({ searchField: e.target.value })\n  };\n\n  // this.? this is a JS keyword representing context in which something is invoked - this.state means we reference the state object onto a class component\n  // In componentDidMount() and render() methods, both are subsumed by super(), which exists within Component, which exists within 'react', which automatically binds this.state within those methods\n  // handleChange (e) {...} would result in an error since context of this.setState is undefined\n  // this.handleChange = this.handleChange.bind(this); would have to be written within constructor(){...} to of this.setState within handleChange method\n  // But, binding within constructor method for each custom method is verbose, so instead ES6 arrow (=>) functions can be used since they have 'lexical scoping' meaning this.setState is bound to where it \n  // was defined in the first place\n\n  // Render class method returns HTML that was used for function before\n  // monsters array passed into CardList below, which is then called upon in multiple components, like card-list.component.jsx and card-component.jsx\n  // HTML element for search functionality is input tag\n  // onChange method: whenever user makes any change to search input, searchField state is changed\n  // e represents 'synthetic event' w/ user interaction in app\n  // actual HTML events directly change DOM, React's synthetic events work through JSX to change state leading to change in VirtualDOM\n  // setState is asynchronous, ie. what we expect it to do doesn't happen 'immediately'\n  // React solution to ^: () => console.log(this.state) fed as second argument into onChange method\n\n  render() {\n    const { monsters, searchField } = this.state; // Equivalent to const monsters = this.state.monsters and const searchField = this.state.searchField\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()) // .toLowerCase so search isn't case-sensitive\n    );\n\n    // ^ Create new array using .filter method for search queries without changing original state\n    // filteredMonsters used for CardList so that re-rendering based on synthetic events dynamically changes application\n\n    return (\n      <div className=\"App\">\n        <h1> Catalogue </h1>\n        <SearchBox\n          placeholder='search monsters' // 'search monsters' in case of this app, but could be substituted if search-box component used elsewhere\n          handleChange={this.handleChange}>\n        </SearchBox>\n        <CardList monsters={filteredMonsters}></CardList>\n      </div >\n    );\n  }\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}